/*
 * This file was generated by the Gradle 'init' task.
 */

buildscript {
    repositories {
        jcenter()
        maven {
            url = 'https://digitalassetsdk.bintray.com/DigitalAssetSDK'
        }
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.7'
    }

}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'com.bmuschko.nexus'
    apply plugin: 'com.google.protobuf'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = 'org.hyperledger.fabric-sdk-java'
    description = 'fabric-java-sdk'
    sourceCompatibility = '1.8'

    // read version from jenkins/manually provided 'artifactVersion', fall back to snapshot (local builds)
    version = project.hasProperty("artifactVersion") ? artifactVersion : '1.4.5-SNAPSHOT'

    task listAllDependencies(type: DependencyReportTask) {}

    tasks.withType(Javadoc).all { enabled = false }

    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://digitalassetsdk.bintray.com/DigitalAssetSDK" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "https://repo.maven.apache.org/maven2" }

        maven {
            url "https://nexus.figure.com/repository/figure"
            credentials {
                username = project.hasProperty("nexusUser") ? nexusUser : System.getenv("NEXUS_USER")
                password = project.hasProperty("nexusPass") ? nexusPass : System.getenv("NEXUS_PASS")
            }
        }
    }

    dependencies {
        compile 'io.grpc:grpc-netty:1.23.0'
        compile 'io.grpc:grpc-protobuf:1.23.0'
        compile 'io.grpc:grpc-stub:1.23.0'
        compile 'io.netty:netty-tcnative-boringssl-static:2.0.26.Final'
        compile 'io.netty:netty-codec-http2:4.1.41.Final'
        compile 'com.google.protobuf:protobuf-java:3.10.0'
        compile 'com.google.protobuf:protobuf-java-util:3.10.0'
        compile 'org.bouncycastle:bcpkix-jdk15on:1.63'
        compile 'commons-logging:commons-logging:1.2'
        compile 'commons-cli:commons-cli:1.4'
        compile 'org.apache.commons:commons-compress:1.19'
        compile 'commons-io:commons-io:2.6'
        compile 'log4j:log4j:1.2.17'
        compile 'log4j:apache-log4j-extras:1.2.17'
        compile 'org.apache.httpcomponents:httpclient:4.5.10'
        compile 'com.spotify:futures-extra:4.2.0'
        compile 'com.google.api:api-common:1.8.1'
        compile 'org.glassfish:javax.json:1.1.4'
        compile 'org.yaml:snakeyaml:1.25'
        compile 'org.miracl.milagro.amcl:milagro-crypto-java:0.4.0'
        compile 'javax.xml.bind:jaxb-api:2.3.1'
        compile 'javax.annotation:javax.annotation-api:1.3.2'
        testCompile 'junit:junit:4.12'
        testCompile 'org.apache.httpcomponents:httpmime:4.5.10'
    }

    def artifactName = it.name

    test {
        exclude '**/*'
    }

    publishing {
        repositories {
            maven {
                url "https://nexus.figure.com/repository/figure"
                credentials {
                    username = project.hasProperty("nexusUser") ? nexusUser : System.getenv("NEXUS_USER")
                    password = project.hasProperty("nexusPass") ? nexusPass : System.getenv("NEXUS_PASS")
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {
                version = version
                artifactId artifactName
                from components.java
                afterEvaluate {
                    artifact tasks.sourcesJar
                    artifact tasks.javadocJar
                    artifact tasks.testJar
                }
            }
        }
    }

    task testJar(type: Jar) {
        classifier = 'test'
        from sourceSets.test.output
    }

    // include the version within the manifest in order to allow for consumers to detect the version at runtime
    jar {
        manifest {
            attributes("Implementation-Version": version)
            attributes("Implementation-Title": project.name)
            attributes("Git-Revision": getCommitId())
            attributes("Git-Short-Revision": getShortCommitId())
        }
    }

    sourceSets.main.java.srcDirs += 'build/generated/source/proto/main/java'
    tasks.withType(Javadoc).all { enabled = false }

    protobuf {
        protoc {
            artifact = "com.google.protobuf:protoc:3.6.1"
        }
        plugins {
            // Optional: an artifact spec for a protoc plugin, with "grpc" as
            // the identifier, which can be referred to in the "plugins"
            // container of the "generateProtoTasks" closure.
            grpc {
                artifact = 'io.grpc:protoc-gen-grpc-java:1.16.1'
            }
        }
        generateProtoTasks {
            ofSourceSet('main')*.plugins {
                // Apply the "grpc" plugin whose spec is defined above, without
                // options.  Note the braces cannot be omitted, otherwise the
                // plugin will not be added. This is because of the implicit way
                // NamedDomainObjectContainer binds the methods.
                grpc {}
            }
        }
    }

}


def getCommitId() {
    def output = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', 'HEAD'
        standardOutput = output
    }

    return output.toString().trim()
}

def getShortCommitId() {
    def output = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = output
    }

    return output.toString().trim()
}
